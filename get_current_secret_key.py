#!/usr/bin/env python3
"""
Script pour r√©cup√©rer la SECRET_KEY actuelle du projet
"""

import os
import sys

def get_current_secret_key():
    """R√©cup√®re la SECRET_KEY actuelle du projet"""
    
    # Configuration Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')
    
    try:
        import django
        django.setup()
        
        from django.conf import settings
        
        print("üîë R√©cup√©ration de la SECRET_KEY actuelle")
        print("=" * 50)
        
        current_secret_key = settings.SECRET_KEY
        
        print(f"‚úÖ SECRET_KEY actuelle trouv√©e :")
        print(f"SECRET_KEY={current_secret_key}")
        
        print(f"\nüìù Copiez cette ligne dans votre fichier .env :")
        print(f"SECRET_KEY={current_secret_key}")
        
        print(f"\n‚ö†Ô∏è  IMPORTANT :")
        print(f"- Cette cl√© est actuellement utilis√©e par votre projet")
        print(f"- Si vous changez cette cl√©, tous les utilisateurs seront d√©connect√©s")
        print(f"- Les sessions existantes seront invalid√©es")
        print(f"- Les tokens JWT existants deviendront invalides")
        
        return current_secret_key
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration : {str(e)}")
        return None

def check_secret_key_security():
    """V√©rifie la s√©curit√© de la SECRET_KEY"""
    
    try:
        import django
        django.setup()
        
        from django.conf import settings
        
        secret_key = settings.SECRET_KEY
        
        print(f"\nüîí Analyse de s√©curit√© de la SECRET_KEY :")
        print(f"- Longueur : {len(secret_key)} caract√®res")
        
        if len(secret_key) < 50:
            print(f"‚ö†Ô∏è  ATTENTION : Cl√© trop courte ! Recommand√© : 50+ caract√®res")
        else:
            print(f"‚úÖ Longueur acceptable")
        
        # V√©rifier la complexit√©
        has_letters = any(c.isalpha() for c in secret_key)
        has_digits = any(c.isdigit() for c in secret_key)
        has_special = any(c in '!@#$%^&*(-_=+)' for c in secret_key)
        
        print(f"- Contient des lettres : {'‚úÖ' if has_letters else '‚ùå'}")
        print(f"- Contient des chiffres : {'‚úÖ' if has_digits else '‚ùå'}")
        print(f"- Contient des caract√®res sp√©ciaux : {'‚úÖ' if has_special else '‚ùå'}")
        
        if has_letters and has_digits and has_special:
            print(f"‚úÖ Complexit√© acceptable")
        else:
            print(f"‚ö†Ô∏è  Recommand√© : m√©langer lettres, chiffres et caract√®res sp√©ciaux")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse : {str(e)}")

if __name__ == "__main__":
    current_key = get_current_secret_key()
    
    if current_key:
        check_secret_key_security()
        
        print(f"\nüí° Recommandations :")
        print(f"1. Utilisez cette cl√© dans votre fichier .env")
        print(f"2. En production, g√©n√©rez une nouvelle cl√©")
        print(f"3. Changez la cl√© r√©guli√®rement pour la s√©curit√©")
        print(f"4. Ne partagez jamais cette cl√©") 